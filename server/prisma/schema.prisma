generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum StatusName {
  ongoing
  completed
  hiatus
  cancelled
}

enum Providers {
  google
  github
}

enum VoteType {
  up
  down
}

model User {
  id        String   @id @default(uuid())
  login     String   @unique
  password  String?
  img       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  provider   Providers?
  providerId String?

  session      Session?
  ratings      Rating[]
  folders      Folder[]
  comments     Comment[]
  bookmarks    Bookmark[]
  chapters     Chapter[]
  commentsVote CommentVote[]

  @@index([login])
  @@index([provider, providerId])
}

model Session {
  userId       String   @id @map("user_id")
  refreshToken String   @unique @map("refresh_token") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Author {
  id    String  @id @default(uuid())
  login String  @unique
  name  String?

  comics Comic[]

  @@index([login])
}

model Genre {
  id    String @id @default(uuid())
  title String @unique

  comics Comic[]

  @@index([title])
}

model Theme {
  id    String @id @default(uuid())
  title String @unique

  comics Comic[]

  @@index([title])
}

model Page {
  chapterId String @map("chapter_id")
  number    Int    @db.UnsignedTinyInt
  img       String

  chapter   Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  bookmarks Bookmark[]

  @@id([chapterId, number])
}

model Chapter {
  id        String   @id @default(uuid())
  comicId   String   @map("comic_id")
  userId    String?
  number    Float
  title     String?
  createdAt DateTime @default(now()) @map("created_at")

  pages     Page[]
  bookmarks Bookmark[]
  comic     Comic      @relation(fields: [comicId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Comic {
  id         String    @id @default(uuid())
  statusId   String    @map("status_id")
  title      String
  desc       String?   @db.Text
  img        String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  releasedAt DateTime? @map("released_at")

  authors   Author[]
  ratings   Rating[]
  genres    Genre[]
  themes    Theme[]
  folders   Folder[]
  comments  Comment[]
  chapters  Chapter[]
  status    Status     @relation(fields: [statusId], references: [id])
  bookmarks Bookmark[]

  @@index([title])
}

model Status {
  id   String     @id @default(uuid())
  name StatusName @unique

  comics Comic[]

  @@index([name])
}

model Rating {
  id        String   @id @default(uuid())
  comicId   String   @map("comic_id")
  userId    String   @map("user_id")
  value     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  comic Comic @relation(fields: [comicId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  title     String
  order     Int      @db.UnsignedTinyInt
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comics Comic[]
}

model Comment {
  id        String   @id @default(uuid())
  comicId   String   @map("comic_id")
  userId    String   @map("user_id")
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  comic        Comic         @relation(fields: [comicId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentsVote CommentVote[]
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model Bookmark {
  userId     String   @map("user_id")
  comicId    String   @map("comic_id")
  chapterId  String   @map("chapter_id")
  pageNumber Int      @map("page_number") @db.UnsignedTinyInt
  updatedAt  DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comic   Comic   @relation(fields: [comicId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  page    Page    @relation(fields: [chapterId, pageNumber], references: [chapterId, number], onDelete: Cascade)

  @@id([userId, comicId])
  @@index([chapterId, pageNumber])
}
