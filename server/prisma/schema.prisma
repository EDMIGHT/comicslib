generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum StatusName {
  ongoing
  completed
  hiatus
  cancelled
}

model User {
  id             String           @id @default(uuid())
  login          String           @unique
  name           String?
  password       String
  img            String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  token          Token?
  ratings        Rating[]
  folders        Folder[]
  comments       Comment[]
  readingHistory ReadingHistory[]
  chapters       Chapter[]

  @@index([login])
}

model Token {
  userId       String   @id @map("user_id")
  refreshToken String   @map("refresh_token") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])
}

model Author {
  id     String  @id @default(uuid())
  login  String  @unique
  name   String?
  comics Comic[]

  @@index([login])
}

model Genre {
  id     String  @id @default(uuid())
  title  String  @unique
  comics Comic[]

  @@index([title])
}

model Page {
  chapterId      String           @map("chapter_id")
  number         Int              @db.UnsignedTinyInt
  img            String
  chapter        Chapter          @relation(fields: [chapterId], references: [id])
  readingHistory ReadingHistory[]

  @@id([chapterId, number])
}

model Chapter {
  id             String           @id @default(uuid())
  number         Float            @unique
  title          String?
  comicId        String           @map("comic_id")
  userId         String
  createdAt      DateTime         @default(now()) @map("created_at")
  pages          Page[]
  readingHistory ReadingHistory[]
  comic          Comic            @relation(fields: [comicId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@index([title])
}

model Comic {
  id             String           @id @default(uuid())
  title          String
  desc           String?          @db.Text
  img            String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  authors        Author[]
  ratings        Rating[]
  genres         Genre[]
  folders        Folder[]
  comments       Comment[]
  chapters       Chapter[]
  status         Status           @relation(fields: [statusId], references: [id])
  statusId       String           @map("status_id")
  readingHistory ReadingHistory[]

  @@index([title])
}

model Status {
  id     String     @id @default(uuid())
  name   StatusName @unique
  comics Comic[]

  @@index([name])
}

model Rating {
  id        String   @id @default(uuid())
  value     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  comic     Comic    @relation(fields: [comicId], references: [id])
  comicId   String   @map("comic_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
}

model Folder {
  id     String  @id @default(uuid())
  title  String
  order  Int     @db.UnsignedTinyInt
  user   User    @relation(fields: [userId], references: [id])
  userId String
  comics Comic[]
}

model Comment {
  id        String   @id @default(uuid())
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  comic     Comic    @relation(fields: [comicId], references: [id])
  comicId   String   @map("comic_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
}

model ReadingHistory {
  userId    String   @map("user_id")
  comicId   String   @map("comic_id")
  chapterId String   @map("chapter_id")
  pageId    Int      @map("page_id") @db.UnsignedTinyInt
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id])
  comic   Comic   @relation(fields: [comicId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])
  page    Page    @relation(fields: [chapterId, pageId], references: [chapterId, number])

  @@id([userId, comicId])
  @@index([chapterId, pageId])
}
